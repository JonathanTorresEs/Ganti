<?php if (!defined('BASEPATH')) exit('No direct script access allowed');/** * Created by PhpStorm. * User: Saul * Date: 25/06/2015 * Time: 03:02 PM */class Controles extends CI_Controller{    public function __construct()    {        parent::__construct();        $this->load->model('controles_model');        $this->load->helper(array('url', 'form'));        $this->load->helper('url');        $this->load->library('pagination');        $this->load->database('default');    }    public function insertar()    {        $this->load->model('controles_model');        $this->load->model('mine_products_model');        $this->load->model('maquinas_model');        $this->load->model('operadores_model');        $hour_in = $this->input->post('hourIn');        $hour_out = $this->input->post('hourOut');        $horometer = $hour_out - $hour_in;         $operator =        $control = array(            'machine_id' => $this->input->post('IDMachine'),            'shift' => $this->input->post('Turno'),            'gas_loaded' => $this->input->post('gas_loaded'),            'operator' => $this->input->post('IDOperador'),            'uploated_user' => $this->input->post('IDUser'),            'hour_meter_initial' => $hour_in,            'hour_meter_final' => $hour_out,            'scoops' => $this->input->post('scoops'),            'oil_m' => $this->input->post('oil_m'),            'oil_h' => $this->input->post('oil_h'),            'oil_n' => $this->input->post('oil_h'),            'oil_t' => $this->input->post('oil_t'),            'oil_d' => $this->input->post('oil_d'),            'horometro' => $horometer,            'available' => $this->input->post('available'),            'comments' => $this->input->post('comments'),            'date' => $this->input->post('date'),            'created_at' => date("Y-m-d H:i:s")        );        if ($this->controles_model->insertar($control)) {            $machine= $this->maquinas_model->consultaMaquina($control["machine_id"]);            $location_id = $machine->location;            $machine_type = $machine->	machine_type;            if ($machine_type == "ligero" || $machine_type == "portatil"){                $proudcts_ids = array(445, 446, 76, 77, 78, 447);// combustilbe, motor, hidra, difere, neuro, trans            }            else{            $proudcts_ids = array(444, 74, 76, 77, 78, 447);// combustilbe, motor, hidra, difere, neuro, trans            }                $quantity_proudcts_ids = array($control["gas_loaded"], $control["oil_m"], $control["oil_h"], $control["oil_n"], $control["oil_t"], $control["oil_d"]);            for ($x = 0; $x < 6; $x++) {                $localtiation_product_array = $this->mine_products_model->consultaMineProduct($proudcts_ids[$x], $location_id);                if ($localtiation_product_array != null) {                    $p_stock = $localtiation_product_array->stock;                    $id_p_l = $localtiation_product_array->id_mine_product;                    $Localicacion_products = array(                        'mine_id' => $location_id,                        'product_id' => $proudcts_ids[$x],                        'stock' => $p_stock + $quantity_proudcts_ids[$x]                    );                    $this->mine_products_model->actualizarMineProduct($id_p_l, $Localicacion_products);                } else {                    $Localicacion_prodcuto = array(                        'mine_id' => $location_id,                        'product_id' => $proudcts_ids[$x],                        'stock' => $quantity_proudcts_ids[$x]                    );                    $this->mine_products_model->insertar($Localicacion_prodcuto);                }                if( $control["hour_meter_final"] > $machine->actual_work) {                    $new_machine= array(                       'actual_work' => $control["hour_meter_final"]                    );                    $this->maquinas_model->actualizarMaquina($machine->machine_id,$new_machine);                }            }        }        redirect('controles');    }    public function index()    {        if ($this->session->userdata('profile') == FALSE) {            redirect(base_url() . 'login');        }        $data['titulo'] = 'controles';        $data['main_content'] = 'inicio';        $this->load->model('controles_model');        //$data['usosGuardados'] = $this->usos_model->leer();        $config = array();        $config["base_url"] = base_url() . "controles/index/pag";        $config["total_rows"] = $this->controles_model->total_registros();        $config["per_page"] = 10;        $config["uri_segment"] = 4;        $config['full_tag_open'] = '<ul class="pagination">';        $config['full_tag_close'] = '</ul>';        $config['num_tag_open'] = '<li>';        $config['num_tag_close'] = '</li>';        $config['cur_tag_open'] = '<li class="active"><span>';        $config['cur_tag_close'] = '<span class="sr-only">(current)</span></span></li>';        $config['prev_link'] = '&laquo;';        $config['prev_tag_open'] = '<li>';        $config['prev_tag_close'] = '</li>';        $config['next_link'] = '&raquo;';        $config['next_tag_open'] = '<li>';        $config['next_tag_close'] = '</li>';        $this->pagination->initialize($config);        $page = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;        $data['controlesGuardados'] = $this->controles_model->read_join_machine();        $data["links"] = $this->pagination->create_links();        if($this->uri->segment(3) !='' && $this->uri->segment(3) != 'pag') {            $control_id = $this->uri->segment(3);            $data['actualizarControles'] = $this->controles_model->consultaControl($control_id);        }        $this->load->model('operadores_model');        $data['operadoresGuardados'] = $this->operadores_model->leer();        $this->load->model('maquinas_model');        $data['maquinasGuardadas'] = $this->maquinas_model->leer();        $this->load->model('minas_model');        $data['minasGuardadas'] = $this->minas_model->leer();        $this->load->model('productos_model');        $data['productosGuardados'] = $this->productos_model->leer();        $this->load->model('login_model');        $data['usuariosGuardados'] = $this->login_model->leer();        $data['dates1'] = $this->controles_model->traerFechas($config["per_page"], $page, 1,1 );/*        $data['dates2'] = $this->controles_model->traerFechas($config["per_page"], $page, 2);*/        $this->load->view('partials/header_view', $data);        $this->load->view('partials/footer_view');        $this->load->view('controles_view', $data);    }    public function actualizar()    {        $this->load->model('controles_model');        $this->load->model('mine_products_model');        $this->load->model('maquinas_model');        $hour_in = $this->input->post('hourIn');        $hour_out = $this->input->post('hourOut');        $horometer = $hour_out - $hour_in;        $control = array(            'machine_id' => $this->input->post('IDMachine'),            'shift' => $this->input->post('Turno'),            'gas_loaded' => $this->input->post('gas_loaded'),            'operator' => $this->input->post('IDOperador'),            'uploated_user' => $this->input->post('IDUser'),            'hour_meter_initial' => $hour_in,            'hour_meter_final' => $hour_out,            'scoops' => $this->input->post('scoops'),            'oil_m' => $this->input->post('oil_m'),            'oil_h' => $this->input->post('oil_h'),            'oil_n' => $this->input->post('oil_h'),            'oil_t' => $this->input->post('oil_t'),            'oil_d' => $this->input->post('oil_d'),            'comments' => $this->input->post('comments'),            'horometro' => $horometer,            'available' => $this->input->post('available'),            'date' => $this->input->post('date'),            'created_at' => date("Y-m-d H:i:s")        );        $control_id = $this->input->post('ID');            $machine = $this->maquinas_model->consultaMaquina($control["machine_id"]);            $location_id = $machine->location;            $machine_type = $machine->machine_type;            $control_object = $this->controles_model->consultaControl($control_id);            $quantity_control_object = array($control_object->gas_loaded, $control_object->oil_m, $control_object->oil_h, $control_object->oil_n, $control_object->oil_t, $control_object->oil_d);        if ($machine_type == "ligero" || $machine_type == "portatil"){                $proudcts_ids = array(445, 446, 76, 77, 78, 447);// combustilbe, motor, hidra, difere, neuro, trans            }            else{                $proudcts_ids = array(444, 74, 76, 77, 78, 447);// combustilbe, motor, hidra, difere, neuro, trans            }            $quantity_products_ids = array($control["gas_loaded"], $control["oil_m"], $control["oil_h"], $control["oil_n"], $control["oil_t"], $control["oil_d"]);            for ($x = 0; $x < 6; $x++) {                $localtiation_product_array = $this->mine_products_model->consultaMineProduct($proudcts_ids[$x], $location_id);                if ($localtiation_product_array != null) {                    $p_stock = $localtiation_product_array->stock;                    $id_p_l = $localtiation_product_array->id_mine_product;                    $Localicacion_product = array(                        'mine_id' => $location_id,                        'product_id' => $proudcts_ids[$x],                        'stock' => $p_stock + ($quantity_control_object[$x] - $quantity_products_ids[$x])                    );                    $this->mine_products_model->actualizarMineProduct($id_p_l, $Localicacion_product);                }                    if( $control["hour_meter_final"] != $machine->actual_work) {                    $new_machine = array(                        'actual_work' => $control["hour_meter_final"]                    );                    $this->maquinas_model->actualizarMaquina($machine->machine_id,$new_machine);                }            }         $this->controles_model->actualizarControl($control_id, $control);        redirect('controles');    }    public function eliminar()    {        $id = $this->uri->segment(3);        $this->load->model('controles_model');        $myCont = $this->controles_model->consultaControl($id);        $this->load->model('productos_model');        $producto = $this->productos_model->consultaProducto(780);        $producto->stock = $producto->stock + $myCont->diesel_loaded;        $this->productos_model->actualizarProducto(780, $producto);        switch ($myCont->oil_type) {            case 1:                $producto = $this->productos_model->consultaProducto(781);                $producto->stock = $producto->stock + $myCont->oil_loaded;                $this->productos_model->actualizarProducto(781, $producto);                break;            case 2:                $producto = $this->productos_model->consultaProducto(808);                $producto->stock = $producto->stock + $myCont->oil_loaded;                $this->productos_model->actualizarProducto(808, $producto);                break;            case 3:                $producto = $this->productos_model->consultaProducto(809);                $producto->stock = $producto->stock + $myCont->oil_loaded;                $this->productos_model->actualizarProducto(809, $producto);                break;            case 4:                $producto = $this->productos_model->consultaProducto(810);                $producto->stock = $producto->stock + $myCont->oil_loaded;                $this->productos_model->actualizarProducto(810, $producto);                break;        }        if ($this->controles_model->eliminarControl($id))            redirect('controles');    }    public function quick_products()    {        $this->load->model('controles_model');        $this->load->model('mine_products_model');        $this->load->model('maquinas_model');        $products_id = $this->input->post('products_id');        $location_id = $this->input->post('location_id');        $quantity = $this->input->post('quantity');        $date = $this->input->post('date');        $localtiation_product_array = $this->mine_products_model->consultaMineProduct($products_id, $location_id);        if ($localtiation_product_array != null) {            $p_stock = $localtiation_product_array->stock;            $id_p_l = $localtiation_product_array->id_mine_product;            $Localicacion_product = array(                'mine_id' => $location_id,                'product_id' => $products_id,                'stock' => $p_stock + $quantity,                'create_at' => $date,                'updated_at' => date("Y-m-d H:i:s")            );            $this->mine_products_model->actualizarMineProduct($id_p_l, $Localicacion_product);        }        return ("");    }    public function getMaquinas()    {        $machine_id = $this->input->post('machine_id');        $this->load->model('maquinas_model');        $maquinas = $this->maquinas_model->consultaMaquina($machine_id);        echo json_encode($maquinas);    }    public function setTab()    {        $tab = $this->input->post('value');        $this->session->set_userdata('conTab', $tab);    }    public function getOperadores()    {        $term = $this->input->post('string');        $this->load->model('operadores_model');        $operators = $this->operadores_model->buscar($term);        $results = [];        $cont = 0;        foreach ($operators as $operator) {            $results["items"][$cont] = ["id" => $operator->operator_id, "text" => $operator->name];            $cont++; /*if($cont >90){ break; }*/        }        echo json_encode($results);    }    public function getOperadores_operadores()    {        $term = $this->input->post('string');        $this->load->model('operadores_model');        $operators = $this->operadores_model->buscar_operadores($term);        $results = [];        $cont = 0;        foreach ($operators as $operator) {            $results["items"][$cont] = ["id" => $operator->operator_id, "text" => $operator->name];            $cont++; /*if($cont >90){ break; }*/        }        echo json_encode($results);    }        public function ajaxEquipo()    {        $machine_id = $this->input->post('machine_id');        $results = [];        $cont = 0;        $this->load->model('controles_model');        $this->load->model('operadores_model');        $operadoresGuardados = $this->operadores_model->leer();        $query = $this->controles_model->fetchByMachine($machine_id);        foreach ($query as $row) {            foreach ($operadoresGuardados as $oper) {                if ($oper->operator_id == $row->operator_id) {                    $operName = $oper->name;                    break;                }            }            $results["items"][$cont] = ["id" => $row->control_id, "date" => $row->date, "shift" => $row->shift, "hi" => $row->hour_meter_initial, "hf" => $row->hour_meter_final, "ht" => ($row->hour_meter_final - $row->hour_meter_initial), "operator" => $operName,];            $cont++;        }        echo json_encode($results);//json_encode(["items" => [["id"=>"1","text"=>"Producto 1"],["id"=>"2","text"=>"Producto 2"],["id"=>"3","text"=>"Producto 3"]]]);    }}